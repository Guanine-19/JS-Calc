{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","createButton","id","text","icon","myclass","this","class","CALCBUTTONS","backspaceButton","clearButton","equalsButton","History","props","history","inhistorySolve","map","solution","i","inhistoryAns","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","React","Component","CalcButton","letIcon","bind","updateInputonClick","item","onClick","evaluated","currentAns","input","historySolve","historyAns","decimal","backspace","updateInput","fixExpression","evaluate","clear","length","setState","substring","val","concat","str","replace","eval","err","setTimeout","answer"],"mappings":"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","file":"static/js/main.78b0e31e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from 'react';\nimport './App.css';\n\nfunction createButton (id, text, icon, myclass) {\n  this.id = id;\n  this.text = text;\n  this.icon = icon;\n  this.class = myclass\n}\n\nconst CALCBUTTONS = [\n  new createButton(\"percent\",\"%\",\"fas fa-percent\",\"func-button\"),\n  new createButton(\"divide\",\"/\",\"fas fa-divide\",\"op-button\"),\n  new createButton(\"seven\",\"7\",\"\",\"num-button\"),\n  new createButton(\"eight\",\"8\",\"\",\"num-button\"),\n  new createButton(\"nine\",\"9\",\"\",\"num-button\"),\n  new createButton(\"multiply\",\"*\",\"fas fa-times\",\"op-button\"),\n  new createButton(\"four\",\"4\",\"\",\"num-button\"),\n  new createButton(\"five\",\"5\",\"\",\"num-button\"),\n  new createButton(\"six\",\"6\",\"\",\"num-button\"),\n  new createButton(\"subtract\",\"-\",\"fas fa-minus\",\"op-button\"),\n  new createButton(\"one\",\"1\",\"\",\"num-button\"),\n  new createButton(\"two\",\"2\",\"\",\"num-button\"),\n  new createButton(\"three\",\"3\",\"\",\"num-button\"),\n  new createButton(\"add\",\"+\",\"fas fa-plus\",\"op-button\"),\n  new createButton(\"zero\",\"0\",\"\",\"num-button\"),\n  new createButton(\"decimal\",\".\",\"\",\"dec-button\")\n];\n\nconst backspaceButton = new createButton(\"backspace\",\"backspace\",\"fas fa-backspace\",\"func-button\");\nconst clearButton = new createButton(\"clear\",\"AC\",\"\",\"func-button\");\nconst equalsButton = new createButton(\"equals\",\"=\",\"fas fa-equals\",\"func-button\");\n\nclass History extends React.Component{\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    let history = this.props.inhistorySolve.map((solution,i)=>{\n      return <p class=\"dropdown-item\">{solution} = {this.props.inhistoryAns[i]}</p>\n    })\n\n    return(\n      <div id=\"history\" class=\"dropdown\">\n      <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        History\n      </button>\n      <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n        {history}\n      </div>\n    </div>\n    )\n  }\n}\n\nclass CalcButton extends React.Component{\n  constructor(props){\n    super(props)\n    this.letIcon = this.letIcon.bind(this)\n    this.updateInputonClick = this.updateInputonClick.bind(this)\n  }\n\n  letIcon(){\n    if(/*this.props.item.icon!=\"\"*/0){\n      return <i class={this.props.item.icon}></i>\n    } else return this.props.item.text\n  }\n\n  updateInputonClick(){\n    this.props.updateInputonClick(this.props.item.text,this.props.item.class);\n  }\n  \n  render(){\n    return(\n      <div id={this.props.item.id} class=\"button col-3 m-0\" onClick={this.updateInputonClick}>\n        {this.letIcon()}\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      evaluated: true,\n      currentAns: \"0\",\n      input: \"0\",\n      historySolve: [],\n      historyAns: [],\n      decimal: false\n    }\n    this.backspace = this.backspace.bind(this)\n    this.updateInput = this.updateInput.bind(this)\n    this.fixExpression = this.fixExpression.bind(this)\n    this.evaluate = this.evaluate.bind(this)\n    this.clear = this.clear.bind(this)\n  }\n  backspace(){\n    if (this.state.input.length>1){\n      this.setState({\n        input: this.state.input.substring(0,this.state.input.length-1)\n      })\n    } else {\n      this.setState({\n        input: \"0\"\n      })\n    }\n  }\n\n  updateInput(val,type){\n    if(type===\"dec-button\" && this.state.decimal){//don't allow repeating decimals\n      return\n    }\n    if(this.state.input===\"0\"){//calculator at initial state => just replace what's in the input\n      this.setState({\n        input: val,\n        evaluated: false\n      })\n    } else if(!this.state.evaluated){//not yet evaluated => proceed to concatenate input string\n      if(type===\"dec-button\"){//decimal entered\n        this.setState({\n          input: this.state.input.concat(val),\n          currentAns: this.state.input.concat(val),\n          decimal: true\n        })\n      } else if (type===\"op-button\"){//allow another decimal after operation entered\n          this.setState({\n            input: this.state.input.concat(val),\n            currentAns: this.state.input.concat(val),\n            decimal: false\n          })\n      } else {//number entered just concatenate\n        this.setState({\n          input: this.state.input.concat(val),\n          currentAns: this.state.input.concat(val)\n        })\n      }\n      \n    } else {\n      if(type===\"num-button\"){//evaluated then number entered\n        this.setState({\n          input: val,\n          currentAns: val,\n          evaluated: false\n        })\n      } else {//evaluated then operation entered\n        this.setState({\n          input: this.state.historyAns[0]+val,\n          currentAns: this.state.historyAns[0]+val,\n          evaluated: false\n        })\n      }\n    }\n  }\n  fixExpression(str){\n    //negative*negative = positive\n    str = str.replace(/--/,\"+\");\n    //use last operation except minus sign\n    str = str.replace(/(\\+|\\*|\\\\|\\-)+(?=[^\\d\\-])/g,\"\");\n    //fix zeroes\n    str = str.replace(/0+(?=[1-9])/,\"\");\n    return str;\n  }\n\n  evaluate(){\n    let str = this.fixExpression(this.state.input);\n    try {\n      eval(str)\n    }\n    catch(err) {\n      this.setState({\n        currentAns: \"SYNTAX ERROR\"\n      });\n      setTimeout(this.clear,1000);\n      return;\n    }\n    let answer = 0;\n    if(str.length>0){answer = eval(str)}\n    this.setState({\n      currentAns: answer,\n      historySolve: [this.state.input,...this.state.historySolve],\n      historyAns: [answer,...this.state.historyAns],\n      evaluated: true,\n      decimal: false\n    })\n  }\n  clear(){\n    this.setState({\n      currentAns: \"0\",\n      input: \"0\",\n      evaluated: false\n    })\n  }\n  render(){\n    return(\n      <div class=\"row\">\n        <div id=\"display-container\" class=\"col-sm-12 p-3\">\n          <History inhistoryAns={this.state.historyAns} inhistorySolve={this.state.historySolve}/>\n          <p>{this.state.input}</p><br />\n          <h2 id=\"display\">{this.state.currentAns}</h2>\n        </div>\n        <div id={clearButton.id} class=\"button col-3 p-1\" onClick={this.clear}>\n          {clearButton.text}\n        </div>\n        <div id={backspaceButton.id} class=\"button col-3 p-1\" onClick={this.backspace}>\n          <i class={backspaceButton.icon}></i>\n        </div>\n\n        {CALCBUTTONS.map((item)=><CalcButton item={item} updateInputonClick={this.updateInput}/>)}\n\n        <div id={equalsButton.id} class=\"button col-6 p-1\" onClick={this.evaluate}>\n          <i class={equalsButton.icon}></i>=\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}